/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { motion } from "framer-motion-3d";
import { modelAnimation } from "./animation";
type GLTFResult = GLTF & {
    nodes: {
        Ear_Cup: THREE.Mesh;
        Cushion: THREE.Mesh;
        ["Mid-"]: THREE.Mesh;
        Seprator001: THREE.Mesh;
        Seprator: THREE.Mesh;
        Cylinder025: THREE.Mesh;
        Cylinder025_1: THREE.Mesh;
    };
    materials: {
        ["Black-1"]: THREE.MeshStandardMaterial;
        Cushion: THREE.MeshStandardMaterial;
        ["Black-2"]: THREE.MeshStandardMaterial;
        Connector: THREE.MeshStandardMaterial;
        GlowBlue: THREE.MeshStandardMaterial;
    };
};

export function HeadphonesModel() {
    //@ts-ignore
    const { nodes, materials } = useGLTF("/headphonesModel.gltf") as GLTFResult;

    return (
        //@ts-ignore
        <motion.group dispose={null} {...modelAnimation}>
            <mesh castShadow receiveShadow geometry={nodes.Ear_Cup.geometry} material={materials["Black-1"]} />
            <mesh castShadow receiveShadow geometry={nodes.Cushion.geometry} material={materials.Cushion} />
            <mesh castShadow receiveShadow geometry={nodes["Mid-"].geometry} material={materials["Black-2"]} />
            <mesh castShadow receiveShadow geometry={nodes.Seprator001.geometry} material={materials["Black-1"]} />
            <mesh castShadow receiveShadow geometry={nodes.Seprator.geometry} material={materials.Connector} />
            <mesh castShadow receiveShadow geometry={nodes.Cylinder025.geometry} material={materials["Black-1"]} />
            <mesh castShadow receiveShadow geometry={nodes.Cylinder025_1.geometry} material={materials.GlowBlue} />
        </motion.group>
    );
}

useGLTF.preload("/headphonesModel.gltf");
